/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as unauthRouteRouteImport } from './routes/(unauth)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as unauthRegisterIndexRouteImport } from './routes/(unauth)/register/index'
import { Route as unauthLoginIndexRouteImport } from './routes/(unauth)/login/index'
import { Route as authDashboardIndexRouteImport } from './routes/(auth)/dashboard/index'

const unauthRouteRoute = unauthRouteRouteImport.update({
  id: '/(unauth)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthRegisterIndexRoute = unauthRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => unauthRouteRoute,
} as any)
const unauthLoginIndexRoute = unauthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => unauthRouteRoute,
} as any)
const authDashboardIndexRoute = authDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof unauthRouteRouteWithChildren
  '/dashboard': typeof authDashboardIndexRoute
  '/login': typeof unauthLoginIndexRoute
  '/register': typeof unauthRegisterIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof unauthRouteRouteWithChildren
  '/dashboard': typeof authDashboardIndexRoute
  '/login': typeof unauthLoginIndexRoute
  '/register': typeof unauthRegisterIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(unauth)': typeof unauthRouteRouteWithChildren
  '/(auth)/dashboard/': typeof authDashboardIndexRoute
  '/(unauth)/login/': typeof unauthLoginIndexRoute
  '/(unauth)/register/': typeof unauthRegisterIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login' | '/register'
  id:
    | '__root__'
    | '/(auth)'
    | '/(unauth)'
    | '/(auth)/dashboard/'
    | '/(unauth)/login/'
    | '/(unauth)/register/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  unauthRouteRoute: typeof unauthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(unauth)': {
      id: '/(unauth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof unauthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauth)/register/': {
      id: '/(unauth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof unauthRegisterIndexRouteImport
      parentRoute: typeof unauthRouteRoute
    }
    '/(unauth)/login/': {
      id: '/(unauth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof unauthLoginIndexRouteImport
      parentRoute: typeof unauthRouteRoute
    }
    '/(auth)/dashboard/': {
      id: '/(auth)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authDashboardIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authDashboardIndexRoute: typeof authDashboardIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authDashboardIndexRoute: authDashboardIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface unauthRouteRouteChildren {
  unauthLoginIndexRoute: typeof unauthLoginIndexRoute
  unauthRegisterIndexRoute: typeof unauthRegisterIndexRoute
}

const unauthRouteRouteChildren: unauthRouteRouteChildren = {
  unauthLoginIndexRoute: unauthLoginIndexRoute,
  unauthRegisterIndexRoute: unauthRegisterIndexRoute,
}

const unauthRouteRouteWithChildren = unauthRouteRoute._addFileChildren(
  unauthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  unauthRouteRoute: unauthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
